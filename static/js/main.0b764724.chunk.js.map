{"version":3,"sources":["components/Break.jsx","components/Session.jsx","components/Clock.jsx","components/TimeLeft.jsx","App.js","serviceWorker.js","index.js"],"names":["Break","breakLength","decrementBreakLengthFiveMinute","incrementBreakLengthFiveMinute","breakLengthInMinutes","moment","duration","minutes","id","className","onClick","Session","props","sessionLength","decrementSessionLengthFiveMinute","incrementSessionLengthFiveMinute","sessionLengthInMinutes","FormattedDate","date","toLocaleTimeString","Clock","state","Date","this","timerID","setInterval","tick","clearInterval","setState","React","Component","TimeLeft","handleSTartStopClick","startStopButtontimerLabel","timeLeft","timerLabel","handleResetButtonClick","readyStatus","formattedTimeLeft","format","trim","divpercent","time_str","prog_now","prog_percent","toFixed","ProgressBar","now","label","animated","App","useState","currentSessionType","setCurrentSessionType","intervalId","setIntervalId","setSessionLength","setBreakLength","setTimeLeft","setReadyStatus","useEffect","isStarted","Container","Row","Col","sm","newSessionLength","newBreakLength","newIntervalId","prevTimeLeft","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0b764724.chunk.js","sourcesContent":["// break length\n\nimport React from 'react';\nimport moment from 'moment';\nimport '../style.css'\n\nconst Break = ({\n    breakLength,\n    decrementBreakLengthFiveMinute,\n    incrementBreakLengthFiveMinute\n}) => {\n   \n    \n    const breakLengthInMinutes= moment.duration(breakLength,'s').minutes()\n\n    return (\n        <div  id= \"break\" className = \"break\">\n        <p id= \"break-label\">Break Length</p>\n        <p id=\"break-length\">{breakLengthInMinutes} minutes</p>\n        <button className=\"btn btn-lg btn-light btn-block\"  id=\"break-increment\" onClick={incrementBreakLengthFiveMinute}>+ 5</button>\n\n        <button className=\"btn btn-lg btn-dark btn-block\" id=\"break-decrement\" onClick={decrementBreakLengthFiveMinute}>- 5</button>\n        </div>\n        \n\n\n    )\n        \n}\n\nexport default Break","// session length\n\nimport React from 'react';\nimport moment from 'moment';\n\nconst Session = (props) => {\n    const{\n        sessionLength,\n        decrementSessionLengthFiveMinute,\n        incrementSessionLengthFiveMinute,\n    } = props;\n\n    \n    const sessionLengthInMinutes= moment.duration(sessionLength,'s').minutes()\n\n    return (\n        <div className= \"session\">\n        <p id= \"session-label\" >Session Length</p>\n        <p id=\"session-length\">{sessionLengthInMinutes} minutes</p>\n        <button className=\"btn  btn-lg btn-light btn-block\" id=\"session-increment\" onClick={incrementSessionLengthFiveMinute}>+ 5</button>\n\n        <button className=\"btn btn-lg btn-dark btn-block\" id=\"session-decrement\" onClick={decrementSessionLengthFiveMinute}>- 5</button>\n        </div>\n        \n\n\n    )\n        \n}\n\nexport default Session","import React from 'react';\n\n\nfunction FormattedDate(props) {\n    return <h2>{props.date.toLocaleTimeString()}</h2>;\n  }\n  \n  class Clock extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {date: new Date()};\n    }\n  \n    componentDidMount() {\n      this.timerID = setInterval(\n        () => this.tick(),\n        1000\n      );\n    }\n  \n    componentWillUnmount() {\n      clearInterval(this.timerID);\n    }\n  \n    tick() {\n      this.setState({\n        date: new Date()\n      });\n    }\n  \n    render() {\n      return (\n        <div>\n        \n          <FormattedDate date={this.state.date} />\n        </div>\n      );\n    }\n  }\nexport default Clock;","import React from 'react'\nimport moment from 'moment'\nimport momentDurationFormatSetup from 'moment-duration-format'\nimport { ProgressBar } from 'react-bootstrap';\nconst TimeLeft = ({\n    handleSTartStopClick,\n    startStopButtontimerLabel,\n    timeLeft,timerLabel,\n    handleResetButtonClick,\n    sessionLength,\n    breakLength,\n    readyStatus,\n}) => {\n\n \n\n    const formattedTimeLeft = moment.duration(timeLeft, 's').format('hh:mm:ss', {trim:false});\n   let divpercent = null;\n    //change timeleft when session length changes\n    //this runs whenever session length ( , [ session length]) changes\n    if (timerLabel === \"Session\"){\n         divpercent = sessionLength;\n    }else if (timerLabel === \"Break\"){\n         divpercent = breakLength;\n    }\n    let time_str = \"\"\n    if (readyStatus){\n        time_str =`Time Remaining for the ${timerLabel}`;\n    }else{\n        time_str = `Ready for a ${timerLabel}?`;\n    }\n\n    const prog_now = ((timeLeft)/divpercent) * 100;\n    const prog_percent = prog_now.toFixed(0);\n\n    return (\n        <div className=\"timeleft\">\n        \n\n           <p id=\"timer-label\"> {time_str}</p>\n           <ProgressBar  now={ `${prog_now}`} label={`${prog_percent}%`} animated/>\n            <p  id= \"timeLeft\" >{formattedTimeLeft} </p>\n        \n            \n            <button className=\"btn btn-primary mr-4\" onClick={handleSTartStopClick}>{startStopButtontimerLabel}</button>\n            <button className=\"btn btn-danger\" id=\"reset\" onClick ={handleResetButtonClick}>Reset</button>\n\n        </div>\n\n\n    )\n}\n\nexport default TimeLeft;","import React, {useState, useEffect, useRef} from 'react';\nimport Break from './components/Break'\nimport Session from './components/Session';\nimport DigitalClock from './components/Clock';\nimport TimeLeft from './components/TimeLeft';\nimport  { Container,Col, Row } from 'react-bootstrap';\n\nfunction App() {\n\n//BREAK : putting these attributes on app so timer can access\n  const [currentSessionType, setCurrentSessionType]= useState('Session'); //be session or break\n  const [intervalId, setIntervalId] = useState(null);\n  const [sessionLength, setSessionLength ] = useState(60*25); //returns tupple of session length (s) and setter\n  const [breakLength, setBreakLength ] = useState(300); //returns tupple of break length (s) and setter\n  const [timeLeft, setTimeLeft] = useState(sessionLength); \n  const [readyStatus, setReadyStatus] = useState(true);\n\n //SESSION\n  \n const decrementSessionLengthFiveMinute = () =>{\n     const newSessionLength = sessionLength- (60*5);\n     if (newSessionLength < 5){\n         setSessionLength(60*5);\n     }else{\n         setSessionLength(newSessionLength);\n     }\n }\n \n const incrementSessionLengthFiveMinute = () =>{\n     setSessionLength(sessionLength + (60*5));\n }\n\n\n useEffect(() => {\n  if(currentSessionType === \"Session\"){\n    setTimeLeft(sessionLength);\n    \n    \n  }else if (currentSessionType === \"Break\"){\n    setTimeLeft(breakLength);\n  }\n},[currentSessionType,sessionLength,breakLength]);\n\n\n  useEffect(()=> {\n    if (timeLeft < 0){\n\n\n      if (currentSessionType === \"Session\"){\n        setCurrentSessionType(\"Break\");\n        setTimeLeft(breakLength);\n        clearInterval(intervalId);\n        setIntervalId(null);\n        setReadyStatus(false);\n\n        \n      }else if (currentSessionType === \"Break\"){\n        setCurrentSessionType(\"Session\");\n        setTimeLeft(sessionLength);\n        clearInterval(intervalId);\n        setIntervalId(null);\n \n        setReadyStatus(false);\n      }\n    }\n\n  }, [breakLength,currentSessionType,sessionLength,intervalId,timeLeft]);\n  //interval Id = null then everything is stopped \n\n\n  // START BUTTON\n  const isStarted = intervalId != null; \n\n  const handleSTartStopClick = () => {\n      // decrement timeleft by 1 every second (1000 ms)\n      //use setInterval\n  //if we are in started mode, have a stop timer (clear interval)  \n  setReadyStatus(true);\n  \n\n      if ( isStarted){\n          clearInterval(intervalId);\n          setIntervalId(null);\n      }else {\n        \n          const newIntervalId = setInterval(() => {\n              setTimeLeft(prevTimeLeft => prevTimeLeft -1)\n          }, 1000);\n          setIntervalId(newIntervalId);\n      }\n  }\n  \n  \n  const decrementBreakLengthFiveMinute = () =>{\n      const newBreakLength = breakLength- (60*5);\n      if (newBreakLength < 5){\n          setBreakLength(60*5);\n      }else{\n          setBreakLength(newBreakLength);\n      }\n  }\n\n  const incrementBreakLengthFiveMinute = () =>{\n      setBreakLength(breakLength+ (60*5));\n  }\n\n\n\n  //reset button: clear timeout interval, set intervalID to null, set sessiontype = session , reset session length to 25, and break to 5 , initial session length =25 \n  const handleResetButtonClick = () => {\n    clearInterval(intervalId);\n    setIntervalId(null);\n    setCurrentSessionType(\"Session\");\n    setSessionLength (60*25);\n    setBreakLength (300);\n    setTimeLeft(60*25);\n\n  }\n\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Row>\n          <Col sm={8} className=\"title\"> <h1>POMODORO TECHNIQUE</h1></Col>\n          <Col sm={4} className=\"dig-clock\"><DigitalClock/> </Col>\n\n        </Row>\n\n      </Container>\n       \n      \n\n\n      <div className=\"row\">\n       \n        <div>\n          <Session\n            sessionLength= {sessionLength}\n            decrementSessionLengthFiveMinute={decrementSessionLengthFiveMinute}\n            incrementSessionLengthFiveMinute={incrementSessionLengthFiveMinute}\n          />\n        </div>\n        <div >\n          <Break\n            breakLength = {breakLength}\n            decrementBreakLengthFiveMinute = {decrementBreakLengthFiveMinute}\n            incrementBreakLengthFiveMinute = {incrementBreakLengthFiveMinute}\n            />\n\n        </div>\n        \n      </div>\n\n        <TimeLeft \n          sessionLength = {sessionLength}\n          breakLength ={breakLength}\n          timerLabel = {currentSessionType}\n          handleSTartStopClick = {handleSTartStopClick}\n          startStopButtontimerLabel={isStarted? \"Stop\" : \"Start\"}\n          timeLeft = {timeLeft}\n          handleResetButtonClick= {handleResetButtonClick}\n          readyStatus={readyStatus}\n          /> \n\n    </div>\n\n    \n  );\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}